{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "factssales1",
						"type": "DatasetReference"
					},
					"name": "factsales1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText22",
						"type": "DatasetReference"
					},
					"name": "factsales2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText23",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as string,",
				"          transactional_date as string,",
				"          product_id as string,",
				"          customer_id as string,",
				"          payment as string,",
				"          credit_card as string,",
				"          loyalty_card as string,",
				"          cost as string,",
				"          quantity as string,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> factsales1",
				"source(output(",
				"          transaction_id as string,",
				"          transactional_date as string,",
				"          product_id as string,",
				"          customer_id as string,",
				"          payment as string,",
				"          credit_card as string,",
				"          loyalty_card as string,",
				"          cost as string,",
				"          quantity as string,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> factsales2",
				"factsales1, factsales2 union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          transaction_id as string,",
				"          transactional_date as string,",
				"          product_id as string,",
				"          customer_id as string,",
				"          payment as string,",
				"          credit_card as string,",
				"          loyalty_card as string,",
				"          cost as string,",
				"          quantity as string,",
				"          price as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}